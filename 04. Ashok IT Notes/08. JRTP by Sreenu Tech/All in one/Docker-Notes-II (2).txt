
What we have discussed on Docker:

	1. Introduction
	2. What is virtualization & What is Containerization
	3. Virtualization vs Containerization
	4. Docker flow
	4. Docker Architecture

		1. Docker CLI		2. Docker Engine	    3. Docker Container Registry
					    |-1. docker daemon
					    |-2. containerd
					    |-3. runc

	5. Docker Objects : 1. docker image 	2. docker container

	6. docker container management commands

	7. docker image management commands

	8. How to build our own docker image. To build our own docker image required Dockerfile

	9. How to write the dockerfile? To write the dockerfile required docker directives

	10. Docker Directives

		1. Build Image Instructions/Directives :FROM, RUN, ADD, ARG, ENV, COPY, WORKDIR, LABEL
	
		2. Container Instruction/Directives : CMD, ENTYPOINT, EXPOSE, HEALTHCHECK, VOLUME


Docker Pending Topics:
======================

	1. Docker Volumes
	2. Docker Container States
	3. Docker Networking
	4. Docker Compose


Docker Container States:

   -->Docker container can exist in 7 different states

	1. created	: The container has been created out of an image, but not yet started

	2. running	: container is up and running and is ready for accessing/usage

	3. paused	: kept temporarily under pause

	4. exited	: The container finished execution successfully and stopped

	5. restarting   : container has been stopped and started
	
	6. removed	: container has been removed

	7. dead		: forceful termination of the contianer indicates dead



VOLUME Directive:
================

--> A containerized application during its execute might generate the data, by default it is
    written on container writable layer (CWL)  of that container. There are few drawbacks
    of writing the data to the container writable layer

	1. writing data to the CWL results in poor i/o operation and performance issue
	2. if the container will be crased or destroyed then the data generated by the application
	   will be lost


There are 2 reasons why containers are stateless

		1. containerized applications can be quickly scalable
		2. containers are quickly recoverable	


	
-->Not all the applications are stateless, there are applications that are generate the data out of
   their execution, 
	
	ex : we package a database server inside the image and run inside a container
	     database will generate the data and stores on CWL

	     If the database server container has been crashed then entire data stored inside the
	     database is lost.


-->To make our docker containerized application as statefull then docker has introduced 2 ways of
   storing the data externalized to the container

			1. bind mounts	2. docker volumes

		

"If your containerized application is producing the data that has to persisted then such containers
 are called 'stateful containers' and to manage their state we need to use bind mounts or 
 docker volumes "


1. bind mounts :

	-->Bind mounts are the directories of the host machine are mounted to the directory locations
	   of the container.So that all the data produced by the containerized application into that 
	   directory location will be stored on host filesystem directory.

	-->Incase container will be crashed then we can quickly spin one more container by mounting
	   the same bind mount onto the new container, so the data will not be lost.

Adv :
	
	-->Both the containerized applications and host can see/use the data since it is stored on 
	   the host machine and mounted on the container


Dis Adv :

	-->Bind mounts works based on host file system, if the host platform is not compatible
	   with the container platform, then there is a chance of running into data incompatibility
	   issues in storing the data
	-->bind mounts are slow in read/writing the data when compared with docker volumes
	-->The devops engineer is responsible for manually managing the bind mounts

		1. create 	2. backup	3. recovery/migrating



How to work with bind mounts?

	1. crate a directory on host machine where youwnat the containerized application data should 	   be stored

	2. provides necessary permission to the directory


syntax 1 : using -v or --volume

	Syn : docker container run -v sourcedirectory:targetdirectory:propagration image:tag	
	Ex  : docker container run -it -v /data/host:/data/contubuntu /bin/bash
	

propagration settings are optional and can take any of the 3 below values

	1. ro = read only
	2. z = the bind mount becomes sharable and can be reused across multiple containers
	3. Z = the bind mount and its content is private to the container and can't reused across the
	       containers.
	

syntax 2 : using --mount

		propagration settings : readonly,shared, private

syn : 

docker container run --mount type=bind, source=/data/host, target=/data/con, shared -it ubuntu /bin/bash


Docker Volumes:
===============

	-->docker volumes are the internal storage volumes managed by the docker engine into which a docker
	   container can write the data to persist, in the evern of container crash. 

	-->It is the preferred mechanisim to store the data generated by the docker container. 


Adv :

	-->Docker volumes works across the platforms, so there is no data incompatibility issues
	-->docker volumes can be created through docker cli
	-->docker volumes can be managed, backup and restored through the help of docker cli
	-->Remote file system of an another computer can be mounted as as docker volume (NFS)
	-->docker volumes are more performance in terms of i/o when compared with bind mounts


There are 2 ways we can work with docker volumes

	1. we can manually create docker volume on the host machine computer using docker cli and can
	   mount them onto the container using their name, these care called "named volumes"

	2. we can directly declare VOLUME directive inside the dockerfile, in this case the docker engine
	   will create docker volume automatically by geenrating an has of the volume to identify it
	   and mounts onto the docker container

		Dockerfile
		===========

		FROM ubuntu
		VOLUME["/data"]

	
1. How to create docker volume through docker cli

	>docker volume create volumename 

		o/p : creates the docker volume under default directory /var/lib/docker/volumes/volumename

2. Get all the docker volumes on that docker host 

	>docker volume ls

3. How to see the details of docker volume

	>docker volume inspect volumename

4. How to delete the volume

	>docker volume rm volumename



How to mount the docker volume onto the docker engine?

There are 2 ways we can mount the volume at the time of lunching the container

	1. -v or --volume		2. --mount


	syn : >docker container run -v volumename:targetDirectory:propagationSetting image:tag

	
	2. --mount

        syn : docker container run --mount type=volume, source=/data/host, target=/data/con, shared image:tag


















	

	