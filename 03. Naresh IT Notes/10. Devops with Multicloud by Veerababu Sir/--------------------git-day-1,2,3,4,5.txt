--------------------git--------------------------------
Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.

*****Installation for Git in your local laptop :
 URL- https://git-scm.com/downloads   #it support os like Windows,Linux,Mac.

yum install git -y # for linux 

After completed of installation go to cmd promt check : git --version 


git init -----to intilaise git process 

-----introduce yourself to Git-------------- 
------all commands start with git only-----------------

---------------------Git commands---------------------
----------------### Tell Git who you are----------------------------
git config --global user.name --- to check configured name 
git config --global user.email --- to check configured email
git config --global user.name "veer"
git config --global user.email "cloud87777@gmail.com"

--------------------git workflow------------

git add -----to add file into staging area from local working directory
git status ----to see the status of the file where it is 
git commit -m "comment"



-------------------------GITHUB------------------------------
 GitHub is one of the most popular resources for developers to share code and work on projects together. Itâ€™s free, easy to use, and has become central in the movement toward open-source software.


git clone ---- to clone entire repository in first time 

git pull ------to pull the updates and chnages from repository

git push ------to push the local updates into remote repo




-----git push-----

# push the changes by using SSH #

### To generate SSH Key

ssh-keygen (give this command into your terminal)

copy the publickey id_rsa.pub

paste into github ssh keys 

settings-->ssh and GPG keys--> Add new ssh key and give any name and paste it your publickey over there  


if origin is pointout to https you can change by using below command 

git remote -v #remote origin information 

git remote set-url origin git@github.com:CloudTechDevOps/mutliclouddevops.git 


------------------------------------------------------------------------------
# push method PAT (Personal access token)

# push the chnages by using GitHUb Token #

###To generate Token 

settin----------------------------------------------------------------------------------------------------------------
gs-->Developer settings-->personal access token -->Token classic --> generate token classic

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

# Example:

git push https://<token>@github.com:/user/repository.git

git push https://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@github.com:/CloudTechDevOps/gitday-3.git

git remote set-url origin https://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@github.com:/CloudTechDevOps/samerepo.git


git remote set-url origin https://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@github.com:/user/repository.git





### GIT CHALLANGES #################

------------------ # Issues in git # ------------------------------
# unable to push ?

----if two developers are working with same repository 

This error occurs when you attempt to push your local changes to the remote repo without updating your local repo with new changes made to the remote repo.

your push request will fails when the difference will come local to remote commit id's 

so first pull updates changes into local and then push it 


Solution:

case--1 

git pull ## pull changes form remote 

## git pull ##   
git pull origin <branch name> if multiple branches are there in remote 	need to be mentioned branch name

git pull --ff-only   #when no commit differences are not there by default pull will work fast-forward only 


case --2

git pull --no-rebase #when commit difference are there local to remote this command work like merge 



case --3 

git pull --rebase # when commit difference are there local to remote if you don't want to crate extra merge commit for linear process it will work.
 
---------------------------------------------------------------------------------

############# Conflicts #####################################

#How To Resolve Merge Conflicts?  ---(-conflicts raises due to in same branch while push time and  different branches while merging time )

Trying to update different data int o same file same line git conflicts occurred 

While merging the two branches if changes are made to two different branches then git will not merge automatically it prompts the user to resolve the merge conflicts manually. Below are the steps to resolve the merge conflicts in git: 

Step 1: Identify the conflict files.

Git will automatically display a message by indicating the file to be resolved from merge conflicts. You have to resolve the conflicts manually.

Step 2: Open the conflict files.

Open the merge conflict files by using editors whatever you are convenient with like (IDE). After opening we can conflict markers as shown below it will indicate where the conflicts are located.

Conflict markers

(<<<<<<<, =======, and >>>>>>>) 
Step 3: Resolve the conflicts.

Remove the unnecessary changes after examining them carefully and keep the changes that are more important.

Step 4: Moving to the staging.

Use the git add command to add the updated files to the staging area after the conflicts have been resolved.

Step 5: Commit and Push the changes

After resolving conflicts commit the changes by using the below command. Including the message which gives information about changes made while resolving the conflicts.

git commit -m "message"
Push the changes made to the remote repository by using. Below command.

git push 
Where other developers can access the code. And perform any changes that are required.

After resolving the conflicts, it is crucial to carefully analyze and test the merged code to make sure that the modifications are functioning as intended and that no new problems have been introduced. These procedures can help developers resolve merge disputes in Git and maintain a dependable and stable codebase.






--------#Branching concepts #-----


BRANCHES:
It's an individual process of development for code.
we create individual branch in real-time to do test and developed.
each developer will work on their own branch.
At the end we will merge all branches into actual branch.
Default branch is Master.

git branch		        : to list the branches
git branch dev	                : to create a new branch
git checkout dev	        : to switch from one branch to another.
git checkout -b dev             : to create and switch from one branch to another.
git branch -m oldname newname	: to rename a branch
git branch -D dev	        : to delete a branch




